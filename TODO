[Makefile]
    [X] Test compilation with test with libs.
    [X] Correct 'not found' for lib directory when no libs defined.
    [X] Implement auto compilation of Unit Tests.
    [X] Test assembly compilation.
    [X] Accept more than one source file directory.
    [X] Remove 'test' PHONY target.
    [X] Check directories to remove trailing bars.
    [X] Create internal-use variables for flags.
    [X] Create flag V to define a verbose mode.
    [X] Make possible to compile many binaries.
    [X] Support to more than one include file.
    [X] Adding external configuration file.
    [X] Finish comments on functions.
    [X] Test compilation of sbin and libexec binaries.
    [X] Deal with libraries with subdirectories.
    [X] Create flag MORE to output errors while tabbing.
    [X] Check for unidentified files to not delete them in clean's.
    [X] Add support to docs generated by Doxygen (Javadoc-like for C++).
    [X] Create vars to explore all .texi, .info, .ps, .html in DOCDIR.
    [X] Add install-info, install-html, install-ps, etc.
    [X] Complete installation target.
    [X] Add shortcuts to create new modules.
    [X] Create target 'standard' to put a project in the standard.
    [X] Add target to create automatically a .gitignore.
    [X] Add other package types (.tgz, .tar.bz2, .zip).
    [X] Link libraries respecting the rule of many executables.
    [X] Set 'mainteiner-clean' to remove dirs even with extra files.
    [X] Automatically link libraries in many library directories.
    [X] Add option to automatically create a Debian package.
    [X] Support Fortran compilation, linkage and lib generation.
    [X] Add AUXFILES variable to put additional files in package.
    [X] Add a MODULE in 'new' and 'delete', for header + directory.
    [X] Add variable FORTRAN_FILE to create a FORTRAN module with 'new'.
    [X] Make 'delete' work with files of any extension.
    [X] Add namespace when creating C++ in a subdirectory.
    [X] Generate flexc++ and bisonc++ functions besides the file names.
    [X] Support subdirectories when installing files.
    [X] Correct uninstall to delete subdirs/files created on install.
    [X] Automatically deduce C/C++ scanner/parser from extensions.
    [X] Create a variable IGNORED to ignore specific files and bins.
    [X] Create artifacts C_MAIN and CXX_MAIN in the file manager.
    [X] Throw errors for non-existing namespaces when creating artifact.
    [X] Support C++ namespace-style (::) with flag IN for 'new/delete'.
    [X] Put last curly-brace of namespace declarations in the next line.
    [X] Add target TAGS to create Vi/Emacs tag files.
    [X] Warn user before deleting in 'realclean/mainteiner-clean'.
    [X] Automatically create/update global header for a namespace.
    [X] Generate libraries with no binary file defined.
    [X] Add automatic git dependency download with Config.mk.
    [X] Support automatic compilation of git with recursive make.
    [X] Add compatibility with MACOSX shell (echo and sed).
    [X] Integrate actions of Makefile with git commits.
    [X] Commit in git when upgrading the Makefile.
    [X] Create target 'deploy' to send project to remote.
    [X] Create target 'sync' to receive project from remote.
    [X] Support compilation of embedded SQL.
    [X] Send scripts and data to its directories in 'standard'.
    [X] Create target 'status' with information about the project.
    [X] Finish automatic support to internationalization (with gettext).
    [X] Add flag 'TRANSLATE' to manage .po files with new/delete.
    [X] Refactor texts and variables from Config.mk.
    [X] Support clone of remote dir + symbolic link to keep Makefile.
    [X] Look over dependency check (by program or by target?).
    [X] Check if program variables are defined when needed.
    [X] Recheck program variables when they are changed.
    [X] Use git submodules (with init/deinit) to manage dependencies.
    [X] Create functions for numeric/lexical/version comparison.
    [X] Create 'Makeballs' to reuse dependency configurations.
    [X] Verify if variable VERSION follows semantic versionment rules.
    [X] Allow Makefile to be executable (add #!/usr/bin/make).
    [X] Support compilation and run of coverage test (with gcov).
    [X] Use git to upgrade Makefile when it is added as a submodule.
    [X] Add option to check system program/library version.
    [X] Change commit messages to follow git convention (imperative).
    [X] Create depdir subdir for external/library/program dependencies.
    [X] Add management flag to make header with NLS headers and macros.
    [ ] Support library with name different from directory's name.
    [ ] Support binary with name different from directory's name.
    [ ] Output test coverage statistics (coverage program + unit tests).
    [ ] Check for system dependency existence iff targets need rebuild. 
    [ ] Support run of profiling tools (with gprof).
    [ ] Support compilation of CORBA with C++.
    [ ] Create management flags to update program version.
    [ ] Test internationalization feature in non-trivial cases.
    [ ] Add deep directory search of test binary name.
    [ ] Add option to automatically create a RPM package.

[Makeballs]
    [X] Add Makeball for Google Mock and Google Test.
    [X] Add Makeball for SOCI database access library.
    [X] Add Makeball for OpenMP shared mem multiprocess programming.
    [ ] Add Makeball for MPI distributed mem multiprocess programming.

[Tests]
    [X] Support continuous integration with Travis CI.
    [X] Test initialization with 'init'.
    [X] Test initialization with 'standard'.
    [ ] Test .tar.gz package generation with 'dist'.
    [ ] Test .tar.gz package generation with 'package'.
    [ ] Test debian package generation with 'dpkg'.
    [ ] Test program installation with 'install'.
    [ ] Test program uninstallation with 'uninstall'.

[Tests:C]
    [X] Test single-file C compilation.
    [X] Test multiple-file C compilation.
    [X] Test C static library generation.
    [X] Test C shared library generation.
    [ ] Test scanner generation (Flex).
    [ ] Test parser generation (Bison).
    [ ] Test internationalization (gettext).
    [ ] Test embedded SQL generation (PostgreSQL).

[Tests:C++]
    [X] Test single-file C++ compilation.
    [X] Test multiple-file C++ compilation.
    [X] Test C++ static library generation.
    [X] Test C++ shared library generation.
    [ ] Test C++ unit test download (gmock/gtest).
    [ ] Test C++ unit test run (gmock/gtest).
    [ ] Test scanner generation (Flexc++).
    [ ] Test parser generation (Bisonc++).
    [ ] Test internationalization (gettext).

[Tests:Fortran]
    [ ] Test single-file Fortran compilation.
    [ ] Test multiple-file Fortran compilation.

[Tests:Assembly]
    [ ] Test single-file Assembly compilation.
